{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red92\green38\blue153;\red28\green0\blue207;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 //\cf0 \
\cf2 //  main.cpp\cf0 \
\cf2 //  Mersene_prime\cf0 \
\cf2 //\cf0 \
\cf2 //  Created by Shashank Saurabh on 01/10/15.\cf0 \
\cf2 //  Copyright (c) 2015 Shashank Saurabh. All rights reserved.\cf0 \
\cf2 //\cf0 \
\
\cf3 #include \cf4 <iostream>\cf3 \
#include \cf4 <fstream>\cf3 \
#include \cf4 <queue>\cf3 \
#include \cf4 <cmath>\cf3 \
#include \cf4 <ctime>\cf3 \
\cf0 \
\cf5 using\cf0  \cf5 namespace\cf0  \cf6 std\cf0 ;\
\
\cf5 long\cf0  modulo_operation( \cf5 long\cf0  n, \cf5 int\cf0  q )\
\{\
    \cf6 clock_t\cf0  t1,t2;\
    \cf5 int\cf0  a[\cf7 12\cf0 ], b[\cf7 12\cf0 ],a_[\cf7 12\cf0 ];\
    \cf5 long\cf0  sum=\cf7 1\cf0 ;\
    \cf5 long\cf0  num=n;\
    \cf5 int\cf0  c=-\cf7 1\cf0 ,top=\cf7 0\cf0 ;\
    \cf6 queue\cf0 <\cf5 int\cf0 > binary_places;\
    \cf5 while\cf0  (q!=\cf7 0\cf0 ) \{\
        c++;\
        \cf5 if\cf0 (q%\cf7 2\cf0 ==\cf7 1\cf0 )\
            binary_places.\cf8 push\cf0 (c);\
        q=q/\cf7 2\cf0 ;\
    \}\
    \cf5 long\cf0  auxilary=num;\cf5 int\cf0  counter=\cf7 0\cf0 ;\
    \cf5 while\cf0  (auxilary!=\cf7 0\cf0 ) \{\
        a[counter]=auxilary%\cf7 10\cf0 ;\
        auxilary=auxilary/\cf7 10\cf0 ;\
        counter++;\
    \}\
    \cf5 for\cf0  (\cf5 int\cf0  ii=counter; ii<\cf7 12\cf0 ; ii++) \{\
        a[ii]=\cf7 0\cf0 ;\
    \}\
    t1=\cf8 clock\cf0 ();\
    \cf5 while\cf0  (!binary_places.\cf8 empty\cf0 ()) \{\
\cf2 //----------------------------------------------------------------------------------------------------------\cf0 \
\cf2 // Finding modulo of num*sum\cf0 \
        \cf5 for\cf0  (\cf5 int\cf0  i=\cf7 0\cf0 ; i<(binary_places.\cf8 front\cf0 ()-top); i++)\
        \{\
            \
            \cf5 long\cf0  carry=\cf7 0\cf0 , num2 =\cf7 0\cf0  , sum2=\cf7 0\cf0 ;\
            \cf5 int\cf0  pow=\cf7 1\cf0 ;\
            \cf5 for\cf0  (\cf5 int\cf0  ii =\cf7 0\cf0 ; ii<\cf7 12\cf0 ; ii++) \{\
                num2 =\cf7 0\cf0 ;\
                \cf5 for\cf0  (\cf5 int\cf0  jj=\cf7 0\cf0 ; jj<ii+\cf7 1\cf0 ; jj++) \{\
                    num2=a[jj] * a[ii - jj] + num2;\cf2 // Finding the jjth digit;\cf0 \
                \}\
                num2=num2 +carry;\
                a_[ii]=num2%\cf7 10\cf0 ;\
                sum2 = sum2 + a_[ii]*pow ;\
                carry = num2/\cf7 10\cf0 ;\
                pow=pow*\cf7 10\cf0 ;\
            \}\
            \cf5 for\cf0  (\cf5 int\cf0  ii=\cf7 0\cf0 ; ii<\cf7 12\cf0 ; ii++) \{\
                a[ii]=a_[ii];\
            \}\
            num=sum2;\
        \}\
\cf2 //----------------------------------------------------------------------------------------------------------\cf0 \
\cf2 // Finding modulo of num*sum\cf0 \
        auxilary=sum;counter=\cf7 0\cf0 ;\
        \cf5 while\cf0  (auxilary!=\cf7 0\cf0 ) \{\
            b[counter]=auxilary%\cf7 10\cf0 ;\
            auxilary=auxilary/\cf7 10\cf0 ;\
            counter++;\
        \}\
        \cf5 for\cf0  (\cf5 int\cf0  ii=counter; ii<\cf7 12\cf0 ; ii++) \{\
            b[ii]=\cf7 0\cf0 ;\
        \}\
        \cf5 long\cf0  carry=\cf7 0\cf0 , num2 =\cf7 0\cf0  , sum2=\cf7 0\cf0 ,pow=\cf7 1\cf0 ;\
        \cf5 for\cf0  (\cf5 int\cf0  ii =\cf7 0\cf0 ; ii<\cf7 12\cf0 ; ii++) \{\
            num2 =\cf7 0\cf0 ;\
            \cf5 for\cf0  (\cf5 int\cf0  jj=\cf7 0\cf0 ; jj<ii+\cf7 1\cf0 ; jj++) \{\
                num2=a[jj] * b[ii - jj] + num2;\cf2 // Finding the jjth digit;\cf0 \
            \}\
            num2=num2 +carry;\
            sum2 = sum2 + (num2%\cf7 10\cf0 )*pow ;\
            carry = num2/\cf7 10\cf0 ;\
            pow=pow*\cf7 10\cf0 ;\
        \}\
        sum=sum2;\
\
\cf2 //----------------------------------------------------------------------------------------------------------\cf0 \
\
        \cf2 //cout<<sum<<endl;\cf0 \
            \cf2 //sum=(num*sum)%modulo;\cf0 \
            top=binary_places.\cf8 front\cf0 ();\
            binary_places.\cf8 pop\cf0 ();\
    \}\
    t2=\cf8 clock\cf0 ();\
    \cf5 float\cf0  time=((\cf5 float\cf0 ) t2 - (\cf5 float\cf0 )t1)/\cf3 CLOCKS_PER_SEC\cf0 ;\
    \cf6 cout\cf0 <<\cf8 endl\cf0 <<\cf4 "time="\cf0 <<(time*\cf7 500000\cf0 )<<\cf8 endl\cf0 ;\
    \cf5 return\cf0  sum;\
\}\
\
\
\cf5 int\cf0  main(\cf5 int\cf0  argc, \cf5 const\cf0  \cf5 char\cf0  * argv[]) \{\
    \cf6 clock_t\cf0  t1,t2;\
    \cf6 ifstream\cf0  lemming;\
    lemming.\cf8 open\cf0 (\cf4 "/Users/shashanksaurabh/Desktop/Journey/Mersene_prime/Mersene_prime/ans.txt"\cf0 );\
    \cf5 int\cf0  T;\
    lemming>>T;\
    \cf5 int\cf0  r1[\cf7 12\cf0 ],r2[\cf7 12\cf0 ];\
    \cf5 long\cf0  total=\cf7 0\cf0 ,sum=\cf7 0\cf0 ;\
    \cf5 int\cf0  a,b,c,d;\
    t1=\cf8 clock\cf0 ();\
    \cf5 for\cf0  (\cf5 int\cf0  i=\cf7 0\cf0 ; i<T; i++) \{\
        lemming>>a>>b>>c>>d;\
        total=\cf9 modulo_operation\cf0 (b, c);\
        \cf5 long\cf0  a_,total_;\
        \cf5 int\cf0  pow=\cf7 10\cf0 ;\
        a_=a;total_=total;\
        \cf5 for\cf0  (\cf5 int\cf0  i=\cf7 0\cf0 ; i<\cf7 12\cf0 ; i++) \{\
            r1[i]=a_%\cf7 10\cf0 ;\
            a_=a_/\cf7 10\cf0 ;\
            r2[i]=total_%\cf7 10\cf0 ;\
            total_=total_/\cf7 10\cf0 ;\
        \}\
        \cf5 long\cf0  num2 =\cf7 0\cf0 , carry=\cf7 0\cf0 , sum2=\cf7 0\cf0 ;pow=\cf7 1\cf0 ;\
        \cf5 for\cf0  (\cf5 int\cf0  ii =\cf7 0\cf0 ; ii<\cf7 12\cf0 ; ii++) \{\
            num2 =\cf7 0\cf0 ;\
            \cf5 for\cf0  (\cf5 int\cf0  jj=\cf7 0\cf0 ; jj<ii+\cf7 1\cf0 ; jj++) \{\
                num2=r1[jj] * r2[ii - jj] + num2;\cf2 // Finding the jjth digit;\cf0 \
            \}\
            num2=num2 +carry;\
            sum2 = sum2 + (num2%\cf7 10\cf0 )*pow ;\
            carry = num2/\cf7 10\cf0 ;\
            pow=pow*\cf7 10\cf0 ;\
    \}\
        sum=sum2 +d +sum;\
\
    \}\
    t2=\cf8 clock\cf0 ();\
    \cf5 for\cf0  (\cf5 int\cf0  i=\cf7 0\cf0 ; i<\cf7 12\cf0 ; i++) \{\
        r1[i]=sum%\cf7 10\cf0 ;\
        sum=sum/\cf7 10\cf0 ;\
    \}\
    \cf5 for\cf0  (\cf5 int\cf0  i=\cf7 0\cf0 ; i<\cf7 12\cf0 ; i++) \{\
        \cf6 cout\cf0 <<r1[\cf7 11\cf0 -i];\
    \}\
    \cf5 float\cf0  time=((\cf5 float\cf0 ) t2 - (\cf5 float\cf0 )t1)/\cf3 CLOCKS_PER_SEC\cf0 ;\
    \cf6 cout\cf0 <<\cf8 endl\cf0 <<\cf4 "time="\cf0 <<(time*\cf7 500000\cf0 );\
    \cf5 return\cf0  \cf7 0\cf0 ;\
\}\
}